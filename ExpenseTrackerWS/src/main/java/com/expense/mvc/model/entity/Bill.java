package com.expense.mvc.model.entity;

// Generated Jul 12, 2012 1:19:22 PM by Hibernate Tools 3.4.0.CR1. Customized by Bala.
//Customization - 1. Field level Annotations
//				- 2. Extends Entity for ToString Implementation.

import static javax.persistence.GenerationType.IDENTITY;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "BILL")
public class Bill extends com.expense.mvc.model.BaseEntity implements java.io.Serializable, Comparable<Bill> {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "BILL_ID", unique = true, nullable = false)
	private Integer billId;

	@Column(name = "DATA_KEY", nullable = false)
	private int dataKey;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "ACCOUNT_ID")
	private Account account;

	@Column(name = "CREATED_DT")
	private Timestamp createdDt;

	@Column(name = "BILL_DT")
	private Date billDt;

	@Column(name = "DUE_DT")
	private Date dueDt;

	@Column(name = "BILL_AMT", precision = 11)
	private Double billAmt;

	@Column(name = "BILL_BALANCE", precision = 11)
	private Double billBalance;

	@Column(name = "Bill_PAID_DT")
	private Date billPaidDt;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PAY_TRAN_ID")
	private Transaction payTran;

	@Column(name = "STATUS", length = 1)
	private Character status;

	public enum Status {
		OPEN('O'), CLOSED('C');

		public char status;

		private Status(char status) {
			this.status = status;
		}
	}

	@SuppressWarnings("deprecation")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fromBill")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Set<Transaction> transForFromBill = new HashSet<Transaction>(0);

	@SuppressWarnings("deprecation")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "toBill")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Set<Transaction> transForToBill = new HashSet<Transaction>(0);

	@SuppressWarnings("deprecation")
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "lastBill")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Account accountHavingLastBill;

	@SuppressWarnings("deprecation")
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "openBill")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Account accountHavingOpenBill;

	public Bill() {
	}

	public Integer getBillId() {
		return billId;
	}

	public void setBillId(Integer billId) {
		this.billId = billId;
	}

	public int getDataKey() {
		return dataKey;
	}

	public void setDataKey(int dataKey) {
		this.dataKey = dataKey;
	}

	public Account getAccount() {
		return account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}

	public Timestamp getCreatedDt() {
		return createdDt;
	}

	public void setCreatedDt(Timestamp createdDt) {
		this.createdDt = createdDt;
	}

	public Date getBillDt() {
		return billDt;
	}

	public void setBillDt(Date billDt) {
		this.billDt = billDt;
	}

	public Date getDueDt() {
		return dueDt;
	}

	public void setDueDt(Date dueDt) {
		this.dueDt = dueDt;
	}

	public Double getBillAmt() {
		return billAmt;
	}

	public void setBillAmt(Double billAmt) {
		this.billAmt = billAmt;
	}

	public Double getBillBalance() {
		return billBalance;
	}

	public void setBillBalance(Double billBalance) {
		this.billBalance = billBalance;
	}

	public Date getBillPaidDt() {
		return billPaidDt;
	}

	public void setBillPaidDt(Date billPaidDt) {
		this.billPaidDt = billPaidDt;
	}

	public Transaction getPayTran() {
		return payTran;
	}

	public void setPayTran(Transaction payTran) {
		this.payTran = payTran;
	}

	public Set<Transaction> getTransForFromBill() {
		return transForFromBill;
	}

	public void setTransForFromBill(Set<Transaction> transForFromBill) {
		this.transForFromBill = transForFromBill;
	}

	public Set<Transaction> getTransForToBill() {
		return transForToBill;
	}

	public void setTransForToBill(Set<Transaction> transForToBill) {
		this.transForToBill = transForToBill;
	}

	public Account getAccountHavingLastBill() {
		return accountHavingLastBill;
	}

	public void setAccountHavingLastBill(Account accountHavingLastBill) {
		this.accountHavingLastBill = accountHavingLastBill;
	}

	public Account getAccountHavingOpenBill() {
		return accountHavingOpenBill;
	}

	public void setAccountHavingOpenBill(Account accountHavingOpenBill) {
		this.accountHavingOpenBill = accountHavingOpenBill;
	}

	public Character getStatus() {
		return status;
	}

	public void setStatus(Character status) {
		this.status = status;
	}

	public boolean isUnpaid() {
		return billBalance > 0;
	}

	public boolean isOpen() {
		return status == Status.OPEN.status;
	}

	@Override
	public int compareTo(Bill o) {
		return getDueDt().compareTo(o.getDueDt());
	}
}
